{"version":3,"file":"static/js/17.1e213201.chunk.js","mappings":"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","sources":["pages/solarData/ChartTable.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    LineElement,\r\n    PointElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    BarController,\r\n    LineController,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport { format } from 'date-fns';\r\n\r\n// Register required controllers and elements\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    LineElement,\r\n    PointElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    BarController,\r\n    LineController\r\n);\r\n\r\nconst MixedChartForLogger = ({ loggerName, loggerData }) => {\r\n    const chartData = {\r\n        labels: loggerData.map((item) => format(new Date(item.date), 'MM/dd')),\r\n        datasets: [\r\n            {\r\n                type: 'bar',\r\n                label: 'Current',\r\n                data: loggerData.map((item) => item.currentPower || 0),\r\n                backgroundColor: 'rgba(75, 192, 192, 0.8)',\r\n                borderColor: 'rgba(75, 192, 192, 1)',\r\n                borderWidth: 1,\r\n            },\r\n            {\r\n                type: 'line',\r\n                label: 'Last Month',\r\n                data: loggerData.map((item) => item.lastMonthPower || 0),\r\n                backgroundColor: 'rgba(153, 102, 255, 1)',\r\n                borderColor: 'rgba(153, 102, 255, 1)',\r\n                tension: 0.4,\r\n            },\r\n            {\r\n                type: 'line',\r\n                label: 'Year-Ago Month',\r\n                data: loggerData.map((item) => item.prevYearPower || 0),\r\n                backgroundColor: 'rgba(255, 159, 64, 1)',\r\n                borderColor: 'rgba(255, 159, 64, 1)',\r\n                tension: 0.4,\r\n            },\r\n            {\r\n                type: 'line',\r\n                label: 'Year-Ago Month Average',\r\n                data: loggerData.map((item) => item.averagePowerGen || 0),\r\n                backgroundColor: 'rgb(2, 250, 35)',\r\n                borderColor: 'rgb(2, 250, 35)',\r\n                tension: 0.4,\r\n            },\r\n        ],\r\n    };\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                position: 'top',\r\n            },\r\n        },\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true,\r\n                title: {\r\n                    display: true,\r\n                    text: 'Power Generation (kW)',\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div style={{ width: '100%', maxWidth: '600px', height: '300px', margin: '0 auto' }}>\r\n            <Chart type=\"bar\" data={chartData} options={options} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ChartTable = ({\r\n    currentMonthsData = {},\r\n    previousYearSameMonthData = {},\r\n    sameYearLastMonthData = {},\r\n}) => {\r\n    const loggerNames = Object.keys(currentMonthsData);\r\n\r\n    const mergedDataByLogger = loggerNames.reduce((acc, loggerName) => {\r\n        const currentData = currentMonthsData[loggerName] || [];\r\n        const previousYearData = previousYearSameMonthData[loggerName] || [];\r\n        const lastMonthData = sameYearLastMonthData[loggerName] || [];\r\n\r\n        const totalPowerGen = previousYearData.reduce(\r\n            (sum, row) => sum + parseFloat(row.power_gen),\r\n            0\r\n        );\r\n        const numberOfRows = previousYearData.length;\r\n        const averagePowerGen = numberOfRows > 0 ? totalPowerGen / numberOfRows : 0;\r\n\r\n        const previousYearMap = new Map(\r\n            previousYearData.map((d) => [new Date(d.date).getDate(), parseFloat(d.power_gen)])\r\n        );\r\n        const lastMonthMap = new Map(\r\n            lastMonthData.map((d) => [new Date(d.date).getDate(), parseFloat(d.power_gen)])\r\n        );\r\n\r\n        const mergedData = currentData.map((item) => {\r\n            const currentDate = new Date(item.date);\r\n            const dayOfMonth = currentDate.getDate();\r\n\r\n            return {\r\n                date: `${currentDate.getMonth() + 1}/${dayOfMonth}/${currentDate.getFullYear()}`,\r\n                loggerName,\r\n                currentPower: parseFloat(item.power_gen),\r\n                lastMonthPower: lastMonthMap.get(dayOfMonth) || null,\r\n                prevYearPower: previousYearMap.get(dayOfMonth) || null,\r\n                averagePowerGen: averagePowerGen.toFixed(2) || null,\r\n            };\r\n        });\r\n\r\n        acc[loggerName] = mergedData;\r\n        return acc;\r\n    }, {});\r\n\r\n    const styles = {\r\n        tableContainer: {\r\n            borderRadius: '8px',\r\n            backgroundColor: '#f9f9f9',\r\n            margin: '20px auto',\r\n            padding: '10px',\r\n        },\r\n        table: {\r\n            width: '100%',\r\n            borderCollapse: 'collapse',\r\n        },\r\n        th: {\r\n            border: '1px solid #ddd',\r\n            backgroundColor: '#afd1f3',\r\n            padding: '10px',\r\n            textAlign: 'center',\r\n        },\r\n        td: {\r\n            border: '1px solid #ddd',\r\n            padding: '10px',\r\n            textAlign: 'center',\r\n            verticalAlign: 'middle',\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div style={styles.tableContainer} className='table-bordered'>\r\n            <table style={styles.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={styles.th}>SN</th>\r\n                        <th style={styles.th}>Logger Name</th>\r\n                        <th style={styles.th}>Graph</th>\r\n                        <th style={{ ...styles.th, width: '300px' }} colSpan=\"2\">\r\n                            Summary\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Object.keys(mergedDataByLogger).map((loggerName, index) => (\r\n                        <tr key={loggerName}>\r\n                            <td style={styles.td}>{index + 1}</td>\r\n                            <td style={styles.td}>{loggerName}</td>\r\n                            <td style={styles.td}>\r\n                                <MixedChartForLogger\r\n                                    loggerName={loggerName}\r\n                                    loggerData={mergedDataByLogger[loggerName]}\r\n                                />\r\n                            </td>\r\n                            <td style={{ ...styles.td, width: '300px' }} colSpan=\"2\"></td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartTable;\r\n"],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","LineElement","PointElement","Title","Tooltip","Legend","BarController","LineController","MixedChartForLogger","_ref","loggerName","loggerData","chartData","labels","map","item","format","Date","date","datasets","type","label","data","currentPower","backgroundColor","borderColor","borderWidth","lastMonthPower","tension","prevYearPower","averagePowerGen","_jsx","style","width","maxWidth","height","margin","children","Chart","options","responsive","maintainAspectRatio","plugins","legend","position","scales","y","beginAtZero","title","display","text","_ref2","currentMonthsData","previousYearSameMonthData","sameYearLastMonthData","mergedDataByLogger","Object","keys","reduce","acc","currentData","previousYearData","lastMonthData","totalPowerGen","sum","row","parseFloat","power_gen","numberOfRows","length","previousYearMap","Map","d","getDate","lastMonthMap","mergedData","currentDate","dayOfMonth","getMonth","getFullYear","get","toFixed","styles","tableContainer","borderRadius","padding","table","borderCollapse","th","border","textAlign","td","verticalAlign","className","_jsxs","colSpan","index"],"sourceRoot":""}