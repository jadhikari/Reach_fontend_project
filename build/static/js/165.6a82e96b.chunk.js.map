{"version":3,"file":"static/js/165.6a82e96b.chunk.js","mappings":"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","sources":["pages/solarData/DataTable.js"],"sourcesContent":["import React from 'react';\r\nimport ExcelJS from 'exceljs';\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst DataTable = ({ currentMonthsData = [] }) => {\r\n    // console.log('DataTable received data:', currentMonthsData);\r\n    // console.log('Type of currentMonthsData:', typeof currentMonthsData);\r\n\r\n    // Validate if currentMonthsData is an array\r\n    if (typeof currentMonthsData === 'object' && !Array.isArray(currentMonthsData)) {\r\n        // Transform object into array of objects\r\n        currentMonthsData = Object.keys(currentMonthsData).map(key => ({\r\n            loggerName: key,\r\n            data: currentMonthsData[key],\r\n        }));\r\n        // console.log('Transformed currentMonthsData:', currentMonthsData);\r\n    }\r\n\r\n    const hasCurrentMonthsData = currentMonthsData.length > 0;\r\n\r\n    // Extract all unique dates from the data\r\n    const allDates = new Set();\r\n    currentMonthsData.forEach(logger => {\r\n        logger.data.forEach(entry => allDates.add(entry.date));\r\n    });\r\n    const dates = Array.from(allDates).sort(); // Convert Set to sorted array\r\n\r\n    // Extract logger names\r\n    const loggerNames = currentMonthsData.map(logger => logger.loggerName);\r\n\r\n    // Prepare data for Excel export\r\n    const prepareDataForExcel = () => {\r\n        const headers = ['Logger Name', ...dates];\r\n        const rows = loggerNames.map(loggerName => {\r\n            return [\r\n                loggerName,\r\n                ...dates.map(date => {\r\n                    const logger = currentMonthsData.find(logger => logger.loggerName === loggerName);\r\n                    const dateData = logger?.data.find(entry => entry.date === date);\r\n                    return dateData ? `${dateData.power_gen}` : '—';\r\n                }),\r\n            ];\r\n        });\r\n        return [headers, ...rows];\r\n    };\r\n\r\n    const handleExportToExcel = async () => {\r\n        const workbook = new ExcelJS.Workbook();\r\n        const worksheet = workbook.addWorksheet('Power Generation Data');\r\n\r\n        const preparedData = prepareDataForExcel();\r\n\r\n        // Add header row\r\n        worksheet.addRow(preparedData[0]);\r\n\r\n        // Add data rows\r\n        preparedData.slice(1).forEach(row => worksheet.addRow(row));\r\n\r\n        // Save Excel file\r\n        const buffer = await workbook.xlsx.writeBuffer();\r\n        saveAs(new Blob([buffer]), 'power_generation_data.xlsx');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <button onClick={handleExportToExcel} className=\"btn btn-sm btn-primary\">\r\n                <i className=\"bi bi-file-earmark-spreadsheet\"></i> Download\r\n            </button>\r\n            <div\r\n                className=\"shadow border pb-3 rounded\"\r\n                style={{\r\n                    width: '100%',\r\n                    maxWidth: '90vw',\r\n                    height: '550px',\r\n                    overflow: 'auto',\r\n                    position: 'relative',\r\n                    zIndex: 0,\r\n                }}\r\n            >\r\n                {hasCurrentMonthsData ? (\r\n                    <table className=\"table table-bordered\" style={{ borderCollapse: 'collapse', fontSize: '12px' }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th style={{ position: 'sticky', backgroundColor: '#afd1f3', textAlign: 'center', padding: 5, minWidth: '150px' }}>\r\n                                    Logger Name\r\n                                </th>\r\n                                {dates.map((date, idx) => (\r\n                                    <th\r\n                                        key={idx}\r\n                                        style={{\r\n                                            position: 'sticky',\r\n                                            top: 0,\r\n                                            backgroundColor: '#afd1f3',\r\n                                            textAlign: 'center',\r\n                                            zIndex: 1,\r\n                                            minWidth: '120px',\r\n                                        }}\r\n                                    >\r\n                                        {date}\r\n                                    </th>\r\n                                ))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {loggerNames.map((loggerName, index) => (\r\n                                <tr key={index}>\r\n                                    <td\r\n                                        style={{\r\n                                            position: 'sticky',\r\n                                            left: 0,\r\n                                            backgroundColor: '#afd1f3',\r\n                                            zIndex: 1,\r\n                                            textAlign: 'center',\r\n                                            padding: 3,\r\n                                            minWidth: '150px',\r\n                                        }}\r\n                                    >\r\n                                        {loggerName}\r\n                                    </td>\r\n                                    {dates.map((date, idx) => {\r\n                                        const logger = currentMonthsData.find(logger => logger.loggerName === loggerName);\r\n                                        const dateData = logger?.data.find(entry => entry.date === date);\r\n                                        const renderValue =\r\n                                            dateData && (dateData.power_gen === '' || dateData.power_gen === null)\r\n                                                ? '—'\r\n                                                : dateData && parseFloat(dateData.power_gen) >= 0\r\n                                                ? `${dateData.power_gen} kWh`\r\n                                                : '—';\r\n                                        return (\r\n                                            <td\r\n                                                key={idx}\r\n                                                className=\"text-center\"\r\n                                                style={{\r\n                                                    backgroundColor: renderValue === '—' || renderValue === '0.0000 kWh' ? 'lightcoral' : 'transparent',\r\n                                                    textAlign: 'center',\r\n                                                    minWidth: '120px',\r\n                                                }}\r\n                                            >\r\n                                                {renderValue}\r\n                                            </td>\r\n                                        );\r\n                                    })}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <p>No data available</p>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DataTable;\r\n"],"names":["_ref","currentMonthsData","Array","isArray","Object","keys","map","key","loggerName","data","hasCurrentMonthsData","length","allDates","Set","forEach","logger","entry","add","date","dates","from","sort","loggerNames","_jsxs","_Fragment","children","onClick","async","workbook","ExcelJS","worksheet","addWorksheet","preparedData","find","dateData","power_gen","addRow","slice","row","buffer","xlsx","writeBuffer","saveAs","Blob","className","_jsx","style","width","maxWidth","height","overflow","position","zIndex","borderCollapse","fontSize","backgroundColor","textAlign","padding","minWidth","idx","top","index","left","renderValue","parseFloat"],"sourceRoot":""}